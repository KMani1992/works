/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package roundprogressbar;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;

/**
 *
 * @author mani
 */
public class Panel_ProgressBar extends javax.swing.JPanel {

    private int progValue = 0;

    /**
     * Creates new form PanelProgressBar
     */
    public Panel_ProgressBar() {
        initComponents();
        this.setSize(500, 500);
    }

    /**
     *
     * @param progValue
     */
    public void updateProgValue(int progValue) {
        this.progValue = progValue;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        //get the graphs object
        Graphics2D g2d = (Graphics2D) g;

        //antialising
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        //center the position
        g2d.translate(this.getWidth() / 2, this.getHeight() / 2);

        //rotate to starting position change
        g2d.rotate(Math.toRadians(270));

        //create PIE arc with default cordinates
        Arc2D.Float arc = new Arc2D.Float(Arc2D.PIE);

        //create ecllipse with initial cordinates
        Ellipse2D circle = new Ellipse2D.Float();

        //set the arc size and position
        arc.setFrameFromCenter(new Point(0, 0), new Point(120, 120));

        //set the circle size and position
        circle.setFrameFromCenter(new Point(0, 0), new Point(110, 110));

        //start angle
        arc.setAngleStart(1);

        /**
         * by default clockwise but we need clockwise rotation. So, need to
         * multiply with minus sign
         */
        arc.setAngleExtent(-progValue * 3.6);

        //update color, draw and fill arc
        g2d.setColor(Color.red);
        g2d.draw(arc);
        g2d.fill(arc);

        //update color, draw and fill circle
        g2d.setColor(Color.white);
        g2d.draw(circle);
        g2d.fill(circle);

        //draw the completion percentage
        g2d.rotate(Math.toRadians(90));
        g2d.setColor(Color.red);
        g2d.setFont(new Font("Verdana", Font.PLAIN, 50));
        FontMetrics fm = g2d.getFontMetrics();
        Rectangle2D r2d = fm.getStringBounds(progValue + "%", g2d);
        int x = (0 - (int) r2d.getWidth()) / 2;
        int y = (0 - (int) r2d.getHeight()) / 2 + fm.getAscent();
        g2d.drawString(progValue + "%", x, y);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 584, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 445, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
